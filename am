#!/usr/bin/env bash
#
# admin manager



function app::d {
  brew deps --installed | rg "$1" |
  awk -F: '$2!=" " {printf "'$cr'%20s'$cd'%s\n",$1,$2} END {printf "\n"}'

  pip3 freeze | cut -d= -f1 | xargs pip3 show | rg "Name:|Requires" |
  cut -d: -f2- | paste -d: - - | tr -d , | rg "$1" |
  awk -F: '$2!=" " {printf "'$cr'%20s'$cd'%s'$cr'\n",$1,$2}'
}

function app::i {
  [[ -z "$1" ]] && return
  br=$(brew deps --installed $1 2>&- | xargs)
  bu=$(brew uses --installed $1 2>&- | xargs)
  pr=$(pip3 show $1 2>&- | rg Requires | cut -d: -f2 | tr -d , | xargs)
  pu=$(pip3 show $1 2>&- | rg Required | cut -d: -f2 | tr -d , | xargs)

  printf "\n$c3%20s $cr%s \n$c3%20s $cr%s\n" "in" "$bu$pu" "re" "$br$pr"
}

function app::l {
  o="-3 -t -o8 -w110"

  echo
  fd -e app -d2 . /Applications -X mdls -name kMDItemDisplayName -name kMDItemVersion |
  cut -d= -f2 | paste - - | tr -d '" ' | awk '{printf "'$cr'%s:'$cd'%s\n",$1,$2}' | pr $o

  echo
  brew ls --v | rg $(brew leaves | xargs | tr " " "|") |
  awk '{printf "'$cr'%s:'$cd'%s\n",$1,$2}' | pr $o

  echo
  pip3 list | awk 'NR>2 {printf "'$cr'%s:'$cd'%s\n",$1,$2}' | pr $o
  printf "$cr\n"
}

function app::u {
  brew upgrade
  brew cleanup
  pip3 list -o | awk 'NR>2 {print $1}' | xargs -n1 pip3 install -U
}

function app::? {
  printf "\n$c3 app commands$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   d $cr deps        list [app] dependencies
  $c3   i $cr info        show [app] info
  $c3   l $cr list        list installed apps
  $c3   u $cr upgrade     upgrade installed apps
  $c3   h $cr help        \n\n"
}



function cln::e {
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* \
    'select LSQuarantineDataURLString from LSQuarantineEvent' | awk 'NF>0'

  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* \
    'delete from LSQuarantineEvent'
}

function cln::m {
  sudo purge
}

function cln::r {
  sudo rm -rf /Library/Caches/*
  sudo rm -rf /Library/Logs/*
  sudo rm -rf /var/folders/*
}

function cln::u {
  rm -rf $lb/Caches/*
  rm -rf $lb/Logs/*
  fd -td ED2D6F60-3BA5-43D3-B694-8137387517A4 . ~/Library/Mail/V8 -E Archive.mbox -x rm -rf
}

function cln::? {
  printf "\n$c3 maintenance commands$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   r $cr root        clear root cache and log
  $c3   u $cr user        clear user cache and log
  $c3   h $cr help        \n\n"
}



function sys::c {
  for c in {0..255}; do
    printf "\033[${1:-38};5;%dm %03d \e[0m" $c $c
    [[ $(((c+1)%16)) -eq 0 ]] && echo
  done
}

function monitor {
  while true; do

    date +'%A %d %B:%j:%H.%M %S' |
    awk -F: '{printf "\033[06;12H'$cd'%s   '$cr'%03d \033[07;12H%s", $1,$2,$3}'

    df -m | awk 'NR==7 {printf "\033[10;12H'$cr'%6.2f \033[11;12H'$cd'%6.2f", $3/1024,$4/1024}'

    vm_stat | rg "free|inac|spec" |
    awk -F: '{s+=$2*4/1024} END {u=(16384-s); printf "\033[10;19H'$cr'%8d \033[11;19H'$cd'%8d", u,s}'

    cpt -cg | tr -d : |
    awk '{a=tolower($1); printf "\033[09;53H\033[%dB '$cr$cd'%4.1f  '$cr'%s",NR,$2,a}'

    [[ $(wf | awk -F: 'END{print $2}') == " 8" ]] && reset &
    wf | awk -F: 'END{printf "\33[10;70H'$cr' channel \33[11;70H'$el$cd'%s", $2}'
  
    [[ -f /tmp/am_cpu ]] && tail -1 /tmp/am_cpu | 
    awk '{printf "\033[10;31H'$cr'%4d%4d%4d%4d \033[11;31H'$cd'%4d%4d%4d%4d'$cr'\n", \
      $1,$3,$5,$7,$2,$4,$6,$8}'

    ps -ecro "pid,vsize,rss,%mem,%cpu,args" > /tmp/am_ps

    awk '{r+=$3/1024;m+=$4;c+=$5} NR>1 && NR<10 \
      {printf "\033[12;12H\033[%dB'$el$cd'%6d %8d '$cr$c3'%9.1f %9.1f  '$cr$cd'%9d  '$cr'%s '$cd'%s\n",\
        NR,$2/1024,$3/1024,$4,$5,$1,$6,$7} END {printf "\033[22;12H '$el$cr'%14d %9.1f %9.1f\n", r,m,c}' /tmp/am_ps

    sleep 2
  done
}

function reset {
  networksetup -setairportpower en0 off
  sleep 3
  networksetup -setairportpower en0 on
}

function sys::i {
  tput clear; tput rmam; tput civis
  fd -tf am_ /tmp -x rm

  cpu &
  #(cpx > /tmp/am_cpu) &
  pid1=$!

  monitor &
  pid2=$!

  while True; do
    trap clear WINCH
    read -sn1 -t1 key
    case $key in
      r) reset ;;
      q) break ;;
    esac
  done

  kill $pid1 
  kill $pid2

  tput cup $(tput lines) 0
  tput sgr0; tput cnorm; tput smam
}

function sys::r {
  printf "
  KeyRepeat:     $c3 $(defaults read -g KeyRepeat) $cr
  KeyInitial:    $c3 $(defaults read -g InitialKeyRepeat) $cr
  PressHold:     $c3 $(defaults read NSGlobalDomain ApplePressAndHoldEnabled) $cr
  MailAttach:    $c3 $(defaults read com.apple.mail DisableInlineAttachmentViewing) $cr

  NonNative6:    $c3 $(defaults read com.flyingmeat.Acorn6 autosaveNonNativeImages 2>&- ) $cr
  NonNative7:    $c3 $(defaults read com.flyingmeat.Acorn7 autosaveNonNativeImages 2>&- ) $cr
  LazyLoad7:     $c3 $(defaults read com.flyingmeat.Acorn7 lazyLoadPalettes 2>&- ) $cr

  Licence6:      ${cd} FMAC60-DBNIY35WUWADXVD5ARZHX4OQWEG5XTC53SDAFZX4H52KYLZHOA-E63E96C3 $cr
  Licence7:      ${cd} FMAC70-QWFBNLAVGNSLIZPTRWOEBMAAVQNQLLZ26CRCSAHWJEV624L4PU-72D2CE85 $cr
  \n"
}

function sys::w {
  defaults write -g KeyRepeat -int 1
  defaults write -g InitialKeyRepeat -int 13
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  defaults write com.apple.mail DisableInlineAttachmentViewing -bool yes

  defaults write com.flyingmeat.Acorn6 autosaveNonNativeImages 1
  if [[ -f ~/Library/Preferences/com.flyingmeat.Acorn7.plist ]]; then
    defaults write com.flyingmeat.Acorn7 autosaveNonNativeImages 1 2>&-
    defaults write com.flyingmeat.Acorn7 lazyLoadPalettes 1 2>&-
  fi
  sys::r
}

function sys::? {
  printf "\n$c3 system functions$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   c $cr colors      display color codes
  $c3   i $cr info        display system monitor
  $c3   r $cr read        read defaults
  $c3   w $cr write       write defaults
  $c3   h $cr help        \n\n"
}



function main::setopt {
  case $switch in
    a) com=app; setopt=dilu ;;
    c) com=cln; setopt=mru ;;
    s) com=sys; setopt=cirw ;;
    *) com=main ;;
  esac
}

function main::switch {
  declare option OPTIND
  while getopts :$setopt option; do
    [[ $option == \? ]] && $com::? && exit
    $com::$option "${@:2}"
  done
  [[ $OPTIND == 1 ]] && $com::?
}

function main {
  if getopts :acs switch; then
    main::setopt
    main::switch "-${1:2}" "${@:2}"
  else
    sys::i
  fi
}

function main::? {
  printf "\n$c3 admin manager$cr\n\n usage: $(basename $0)$c3 switch$cr [opts] args\n
  $c3  -a $cr [diluh]    $cb app$cr [deps info list update help]
  $c3  -c $cr [mruh]     $cb maintenance$cr [memory root user help]
  $c3  -s $cr [cirwh]    $cb system$cr [colors info read write help]
  $c3  -h $cr            $cb help$cr \n\n"

  printf "\n requires: bash_profile$cd colors$cr cpt cpu fd rename$cd rn$cr homebrew pip3 python$cd cpu$cr \n\n"
}

main "${@}"
