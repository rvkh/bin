#!/usr/bin/env bash
#
# condo manager
# v3.5a


function arc::c {
  [[ ! -d $1 || -z $3 || ! -d $aa/arc/$2/$3 ]] && main::?
  arc::i $1
  arc::n $1 $2 $3 $4
  arc::r "$(date '+%Y %b %d')"
}

function arc::i {
  [[ ! -d $1_x || -d $1_x/originals ]] && return
  fd -e png . $1_x -x gm mogrify -format jpg -quality 88

  mkdir -p $1_x/{floorPlans,originals}
  mv $1_x/{*.jpg,floorPlans}
  mv $1_x/{*.png,originals}

  cp $1/ax/xx.csv $1_x
  rn -c
}

function arc::n {
  [[ -z $4 ]] && t=$(date '+%Y%m%d0000') || t=$4"0000"
  darc=$aa/arc/$2/$3/$1.tar
  dcur=$aa/cur/$1_x.tar

  fd -p $1 -X touch -amt $t
  tar cf $darc $1
  tar cf $dcur $1_x

  touch -amt $t {$darc,$dcur}
  chmod 600 {$darc,$dcur}

  mv $1* ~/.Trash
}

function arc::r {
  fd -e tar . $aa/arc -X stat -f "%Sm/%z%N" -t "%Y %b %d  %j" | tr "." "/" | \
    awk -F/ '{printf "%20s '$cd'%6.1f '$cr'%4s %5s   %s\n", $1,$2/1024/1024,$8,$9,$10}' | \
    sort -nk1 -k2M | rg "$1" | nl

  local n=$(ls $aa/cur | wc -w | tr -d " ")
  printf "$c3%15s %02d %04d$cr\n" $(date +%j) $n $((n*40))
}

function arc::x {
  #farc=$aa/arc/$2/$3/$1.tar
  #[[ -f $farc ]] && tar xf $farc --directory $de
  fd -e tar $1 -p $aa/arc -x tar xf {} --directory $de
}

function arc::? {
  printf "\n$c3 archive commands$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   c $cr condo       archive [condo] to [state] [county]
  $c3   r $cr read        display and search archives [condo]
  $c3   x $cr xtract      extract [condo] archive
  $c3   h $cr help        \n\n"
}





function exp::v {
  [[ ! -d $1 || ! -d $1/ax ]] && exp::?
  local n=$((($(fd -e png . $1/ax | wc -l)-1)/3))
  local x=$(cut -d, -f1 $1/ax/xx.csv | awk 'NF' | sort -u | wc -l)
  [[ $n -ne $x ]] && exit 2
}

function exp::w {
  exp::v $1
  mkdir -p $1_x
  c=$1/ax/c.png  m=$1/ax/m  s=$1/ax/s  u=$1/ax/u  o=$1_x/$(cut -d, -f6 $1/ax/xa.csv)
  fd . $m -x gm convert $c -page +1580+90 $m/{/} -page +1500+300 $s/{/} -page +100+300 $u/{/} -flatten $o{/}
  ql $1_x
}

function exp::x {
  c=$1/ax/c.png  m=$1/ax/m/$2  s=$1/ax/s/$2  u=$1/ax/u/$2  o=$1_x/"$3"
  echo "gm convert $c -page +1580+90 $m -page +1500+300 $s -page +100+300 $u -flatten $o"
}

function exp::c {
  exp::v $1
  mkdir -p $1_x
  while IFS=, read A B Index; do
    [[ -n $A && ! -e $1_x/$A.png ]] && exp::x $1 $B.png "$A".png
  done < $1/ax/xx.csv | sort -u | parallel --bar
  #done < $1/ax/xx.csv | sort -u | xargs -n13 -P8 gm
  ql $1_x
}

function exp::m {
  [[ ! -d $1 ]] && return
  ini::m $1

  local cl="#a9a9a9"
  local cv="#5e5e5e"
  local cm="#797979"

  local fd="/Users/robbie/Library/Fonts"
  local fl="$fd/sf-pro-text-light.otf"
  local fh="$fd/sf-pro-text-heavy.otf"
  local fr="$fd/sf-pro-text-regular.otf"

  local note='Plan may be mirrored, flipped, or not be oriented to site plan'

  while IFS=, read A B C D E F; do
    [[ -n $B ]] && B="$B, " || B=""
    gm convert $dc/ast/c.png \
      -pointsize 40 -font "$fl" -fill $cv -draw "text 100,120 '$D'" \
      -pointsize 24 -font "$fh" -fill $cv -draw "text 100,153 '$C, $B$A'" \
      -pointsize 22 -font "$fr" -fill $cl -draw "text 100,1380 '$note'" \
      $1/ax/c.png
  done < $1/ax/xa.csv

  while IFS=, read K L M N O P Q R S; do
    local o=(-density 80 -size 1000x200 xc:white -pointsize 22 -font "$fr"
    -fill \'$cl\' -draw \'
    text 0,50 "Unit" text 135,50 "Floor"
    text 460,20 "Bed" text 545,20 "Bath" text 635,20 "Half" text 720,20 "Levels"
    text 460,50 \"Living Area\" text 460,110 \"Plan Type\" \'
    -fill \'$cv\' -draw \'
    text 0,20 \"$L\" text 55,50 \"$M\" text 200,50 \"$N\" text 0,110 \"$O\"
    text 515,20 \"${P:0:1}\" text 605,20 \"${P:1:1}\"
    text 690,20 \"${P:2:1}\" text 805,20 \"${P:3:1}\"
    text 600,50 \"$R sf  $S sm\" text 590,110 \"$Q\" \')

    echo "gm convert ${o[@]} $1/ax/m/$K.png"
  done < $1/ax/zz.csv | parallel -P8

  echo m: $(ls $1/ax/m | wc -w)
}

function exp::s {
  [[ ! -d $1 ]] && return
  fd -e png . s -x gm composite n/{/} {} $1/ax/s/{/}
  echo s: $(ls $1/ax/s | wc -w)
  ql $1/ax/s
}

function exp::u {
  [[ ! -d $1 ]] && return
  cp -r $1/ai $de/u
  fd -e png . u -x gm mogrify -trim -resize 1280x1000 -gravity west -extent 0x1000

  while IFS=, read K L M N O P Q R S; do
    n=$de/u/$K.png  t=$de/u/"$(echo ${Q// /_})".png  u=$1/ax/u/$K.png
    [[ -f $n ]] && cp $n $u || cp "$t" $u
  done < $1/ax/zz.csv &>/dev/null
  echo u: $(ls $1/ax/u | wc -w)
  rm -r $de/u
}

function exp::? {
  printf "\n$c3 export commands$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   c $cr condo       composite and export [condo]$cd requires$cr meta site and unit export
  $c3   m $cr meta        generate and export [condo] metadata images
  $c3   s $cr site        composite and export [condo] site$cd requires$cr site image dirs
  $c3   u $cr unit        resize and export [condo] unit images
  $c3   h $cr help        \n\n"
}





function ini::c {
  for x in ${1:-*}; do
    [[ ! -d $x || -d $x/ax ]] && continue
    rn -x $x
    mkdir -p $x/{aa,ai,ax/{m,s,u}}
    mv $x/{*done*,*finish*} $x/ai 2>&-
    mv $x/*.* $x/aa 2>&-
    cp $dc/ast/{m.numbers,s.acorn} $x
    xls $x/aa
  done
  rn -c
}

function ini::o {
  [[ ! -d $1 ]] && ini::?
  open $1/m.numbers $1/aa/*.csv
}

function ini::m {
  [[ ! -d $1 || ! -d $de/m ]] && return
  local b=$1/ax
  cut -d, -f1-6 $de/m/m-a.csv | tr -d '\r' | head -n 1 > $b/xa.csv
  cut -d, -f1-3 $de/m/m-x.csv | tr -d '\r' > $b/xx.csv
  cut -d, -f11-19 $de/m/m-z.csv | rg -v ',,,,,,' | tr -d '\r' > $b/zz.csv

  mkdir -p $b/x
  awk -F, '{printf "%s,%s\n", $3,$2}' $b/xx.csv > $b/x/key.csv
  awk -F, '{printf "%s,%s,%s,%s,%s,%s,%s,%s\n", $1,$2,$3,$4,$5,$7,$7,$1}' $b/zz.csv > $b/x/meta.csv
  awk -F, '{f=tolower($7); gsub(/ /,"_",f); printf "%s,%d,%d,%d,%d,%s\n", \
    $7,substr($6,1,1),substr($6,2,1),substr($6,3,1),substr($6,4,1),f}' $b/zz.csv | sort -u > $b/x/plan.csv
  rm -r $de/m
}

function ini::s {
  [[ ! -d $1 ]] && return
  mkdir -p $de/{n,s}
  while IFS=, read K L M N O P Q R S; do
    n=$de/n/$K.png  s=$de/s/$K.png  x=${K:${2:-0}:${3:-2}}.png
    [[ -f $de/n$x ]] && cp $de/n$x $n || cp $de/nn.png $n
    [[ -f $s ]] && continue
    [[ -f $de/$x ]] && cp $de/$x $s || cp $de/ss.png $s
  done < $1/ax/zz.csv &>/dev/null
  echo s: $(ls $de/s | wc -w)
}

function ini::u {
  [[ ! -d $1 ]] && return
  mkdir -p $1/an
  while IFS=, read K L M N O P Q R S; do
    n=$1/ai/$K.png  t=$1/ai/$Q.png  u=$1/an/$K.png
    [[ -f $t ]] && cp $t $u || cp $n $u
  done < $1/ax/zz.csv &>/dev/null
  echo u: $(ls $1/an | wc -w)
}

function ini::? {
  printf "\n$c3 initialize commands$cr\n\n usage:\t$(basename $0) -$switch$c3 opts$cr [args$cd defaults$cr]\n
  $c3   c $cr condo       initialize [condo]
  $c3   m $cr meta        read and import [condo] metadata
  $c3   s $cr site        generate [condo] site images$cd requires$cr metadata
  $c3   h $cr help        \n\n"
}


function main::setopt {
  case $switch in
    a) com=arc; setopt=crx ;;
    e) com=exp; setopt=cmsuw ;;
    i) com=ini; setopt=comsu ;;
    *) com=main ;;
  esac
}

function main::switch {
  declare option OPTIND
  while getopts :$setopt option; do
    [[ $option == \? ]] && $com::? && exit
    $com::$option "${@:2}"
  done
  [[ $OPTIND == 1 ]] && $com::?
}

function main {
  if getopts :aei switch; then
    main::setopt
    main::switch "-${1:2}" "${@:2}"
  else
    arc::r "${@}"
  fi
}

function main::? {
  printf "\n$c3 condo manager\n\n$cr usage: $(basename $0)$c3 switch$cr [opts] args\n
  $c3  -a $cr [crxh]    $cb archive$cr [condo read xtract help]
  $c3  -e $cr [cmsuh]   $cb export$cr [condo meta site unit help]
  $c3  -i $cr [cmsh]    $cb initialize$cr [condo meta site help]
  $c3  -h $cr           $cb help$cr\n\n"

  printf "\n requires: bash_profile${cd}-colors$cr fd exiftool graphicsmagick rename$cd rn$cr parallel\n\n"
}

main "${@}"
